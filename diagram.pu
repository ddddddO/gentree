@startuml
namespace gtree {
    class Node << (S,Aquamarine) >> {
        - name string
        - hierarchy uint
        - index uint
        - brnch branch
        - parent *Node
        - children []*Node

        - setParent(parent *Node) 
        - addChild(child *Node) 
        - hasChild() bool
        - findChildByText(text string) *Node
        - isDirectlyUnder(node *Node) bool
        - isLastOfHierarchy() bool
        - isRoot() bool
        - setBranch(branchs ...string) 
        - branch() string
        - setPath(paths ...string) 
        - validatePath() error
        - path() string
        - clean() 
        - toJSONNode(jParent *jsonNode) *jsonNode
        - toTOMLNode(tParent *tomlNode) *tomlNode
        - toYAMLNode(yParent *yamlNode) *yamlNode
        - toJSONNode(jParent *jsonNode) *jsonNode

        + Add(text string) *Node

    }
    class branch << (S,Aquamarine) >> {
        - value string
        - path string

    }
    class branchFormat << (S,Aquamarine) >> {
        - directly string
        - directly string

    }
    class colorizeSpreader << (S,Aquamarine) >> {
        - fileConsiderer *fileConsiderer
        - fileColor *color.Color
        - fileCounter *counter
        - dirColor *color.Color
        - dirCounter *counter

        - spread(w io.Writer, roots []*Node) error
        - spreadBranch(current *Node) string
        - colorize(current *Node) 
        - summary() string

    }
    class colorizeSpreaderPipeline << (S,Aquamarine) >> {
        - spread(ctx context.Context, w io.Writer, roots <font color=blue>chan</font> *Node) <font color=blue>chan</font> error

    }
    class colorizeSpreaderSimple << (S,Aquamarine) >> {
        - fileConsiderer *fileConsiderer
        - fileColor *color.Color
        - fileCounter *counter
        - dirColor *color.Color
        - dirCounter *counter

        - spread(w io.Writer, roots []*Node) error
        - spreadBranch(current *Node) string
        - colorize(current *Node) string
        - summary() string

    }
    class config << (S,Aquamarine) >> {
        - lastNodeFormat branchFormat
        - intermedialNodeFormat branchFormat
        - space spaceType
        - massive bool
        - ctx context.Context
        - encode encode
        - dryrun bool
        - fileExtensions []string

    }
    class counter << (S,Aquamarine) >> {
        - n uint
        - mu sync.Mutex

        - next() uint
        - reset() 
        - current() uint

    }
    class defaultGrower << (S,Aquamarine) >> {
        - lastNodeFormat branchFormat
        - intermedialNodeFormat branchFormat
        - enabledValidation bool

        - grow(roots []*Node) error
        - assemble(current *Node) error
        - assembleBranch(current *Node) error
        - assembleBranchDirectly(current *Node) 
        - assembleBranchIndirectly(current *Node, parent *Node) 
        - assembleBranchFinally(current *Node, root *Node) 
        - enableValidation() 

    }
    class defaultGrowerPipeline << (S,Aquamarine) >> {
        - grow(ctx context.Context, roots <font color=blue>chan</font> *Node) (<font color=blue>chan</font> *Node, <font color=blue>chan</font> error)
        - worker(ctx context.Context, wg *sync.WaitGroup, roots <font color=blue>chan</font> *Node, nodes <font color=blue>chan</font> *Node, errc <font color=blue>chan</font> error) 

    }
    class defaultGrowerSimple << (S,Aquamarine) >> {
        - lastNodeFormat branchFormat
        - intermedialNodeFormat branchFormat
        - enabledValidation bool

        - grow(roots []*Node) error
        - assemble(current *Node) error
        - assembleBranch(current *Node) error
        - assembleBranchDirectly(current *Node) 
        - assembleBranchIndirectly(current *Node, parent *Node) 
        - assembleBranchFinally(current *Node, root *Node) 
        - enableValidation() 

    }
    class defaultMkdirerPipeline << (S,Aquamarine) >> {
        - mkdir(ctx context.Context, roots <font color=blue>chan</font> *Node) <font color=blue>chan</font> error
        - worker(ctx context.Context, wg *sync.WaitGroup, roots <font color=blue>chan</font> *Node, errc <font color=blue>chan</font> error) 

    }
    class defaultMkdirerSimple << (S,Aquamarine) >> {
        - fileConsiderer *fileConsiderer

        - mkdir(roots []*Node) error
        - isExistRoot(roots []*Node) bool
        - makeDirectoriesAndFiles(current *Node) error
        - mkdirAll(dir string) error
        - mkfile(path string) error

    }
    class defaultSpreader << (S,Aquamarine) >> {
        - spread(w io.Writer, roots []*Node) error
        - spreadBranch(current *Node) string
        - write(w io.Writer, in string) error

    }
    class defaultSpreaderPipeline << (S,Aquamarine) >> {
        - spread(ctx context.Context, w io.Writer, roots <font color=blue>chan</font> *Node) <font color=blue>chan</font> error
        - worker(ctx context.Context, wg *sync.WaitGroup, bw *bufio.Writer, roots <font color=blue>chan</font> *Node, errc <font color=blue>chan</font> error) 

    }
    class defaultSpreaderSimple << (S,Aquamarine) >> {
        - spread(w io.Writer, roots []*Node) error
        - spreadBranch(current *Node) string
        - write(w io.Writer, in string) error

    }
    class fileConsiderer << (S,Aquamarine) >> {
        - extensions []string

        - isFile(current *Node) bool

    }
    interface grower  {
        - grow( []*Node) error
        - enableValidation() 

    }
    interface growerPipeline  {
        - grow( context.Context,  <font color=blue>chan</font> *Node) (<font color=blue>chan</font> *Node, <font color=blue>chan</font> error)
        - enableValidation() 

    }
    interface growerSimple  {
        - grow( []*Node) error
        - enableValidation() 

    }
    class gtree.Option << (T, #FF7700) >>  {
    }
    class gtree.encode << (T, #FF7700) >>  {
    }
    class gtree.spaceType << (T, #FF7700) >>  {
    }
    interface iTree  {
        - output( io.Writer,  io.Reader,  *config) error
        - outputProgrammably( io.Writer,  *Node,  *config) error
        - makedir( io.Reader,  *config) error
        - makedirProgrammably( *Node,  *config) error

    }
    class inputFormatError << (S,Aquamarine) >> {
        - row string

        + Error() string

    }
    class jsonNode << (S,Aquamarine) >> {
        + Name string
        + Children []*jsonNode
        + Name string
        + Children []*jsonNode

    }
    class jsonSpreader << (S,Aquamarine) >> {
        - spread(w io.Writer, roots []*Node) error

    }
    class jsonSpreaderPipeline << (S,Aquamarine) >> {
        - spread(ctx context.Context, w io.Writer, roots <font color=blue>chan</font> *Node) <font color=blue>chan</font> error

    }
    class jsonSpreaderSimple << (S,Aquamarine) >> {
        - spread(w io.Writer, roots []*Node) error

    }
    interface mkdirerPipeline  {
        - mkdir( context.Context,  <font color=blue>chan</font> *Node) <font color=blue>chan</font> error

    }
    interface mkdirerSimple  {
        - mkdir( []*Node) error

    }
    class nodeGenerator << (S,Aquamarine) >> {
        - parser *markdown.Parser

        - generate(row string, idx uint) (*Node, error)
        - handleErr(err error, row string) error

    }
    class nopGrower << (S,Aquamarine) >> {
        - grow(_ []*Node) error
        - enableValidation() 

    }
    class nopGrowerPipeline << (S,Aquamarine) >> {
        - grow(ctx context.Context, roots <font color=blue>chan</font> *Node) (<font color=blue>chan</font> *Node, <font color=blue>chan</font> error)

    }
    class nopGrowerSimple << (S,Aquamarine) >> {
        - grow(_ []*Node) error
        - enableValidation() 

    }
    class rootGenerator << (S,Aquamarine) >> {
        - counter *counter
        - scanner *bufio.Scanner
        - nodeGenerator *nodeGenerator

        - generate() ([]*Node, error)

    }
    class rootGeneratorPipeline << (S,Aquamarine) >> {
        - nodeGenerator *nodeGenerator

        - generate(ctx context.Context, blocks <font color=blue>chan</font> string) (<font color=blue>chan</font> *Node, <font color=blue>chan</font> error)
        - worker(ctx context.Context, wg *sync.WaitGroup, blocks <font color=blue>chan</font> string, rootc <font color=blue>chan</font> *Node, errc <font color=blue>chan</font> error) 

    }
    class rootGeneratorSimple << (S,Aquamarine) >> {
        - counter *counter
        - scanner *bufio.Scanner
        - nodeGenerator *nodeGenerator

        - generate() ([]*Node, error)

    }
    interface spreader  {
        - spread( io.Writer,  []*Node) error

    }
    interface spreaderPipeline  {
        - spread( context.Context,  io.Writer,  <font color=blue>chan</font> *Node) <font color=blue>chan</font> error

    }
    interface spreaderSimple  {
        - spread( io.Writer,  []*Node) error

    }
    class stack << (S,Aquamarine) >> {
        - nodes *list.List

        - push(n *Node) *stack
        - pop() *Node
        - size() int
        - dfs(current *Node) 

    }
    class tomlNode << (S,Aquamarine) >> {
        + Name string
        + Children []*tomlNode

    }
    class tomlSpreaderPipeline << (S,Aquamarine) >> {
        - spread(ctx context.Context, w io.Writer, roots <font color=blue>chan</font> *Node) <font color=blue>chan</font> error

    }
    class tomlSpreaderSimple << (S,Aquamarine) >> {
        - spread(w io.Writer, roots []*Node) error

    }
    class tree << (S,Aquamarine) >> {
        - roots []*Node
        - grower grower
        - spreader spreader

        - grow() error
        - spread(w io.Writer) error

    }
    class treePipeline << (S,Aquamarine) >> {
        - grower growerPipeline
        - spreader spreaderPipeline
        - mkdirer mkdirerPipeline

        - output(w io.Writer, r io.Reader, conf *config) error
        - outputProgrammably(w io.Writer, root *Node, conf *config) error
        - makedir(r io.Reader, conf *config) error
        - makedirProgrammably(root *Node, conf *config) error
        - grow(ctx context.Context, roots <font color=blue>chan</font> *Node) (<font color=blue>chan</font> *Node, <font color=blue>chan</font> error)
        - spread(ctx context.Context, w io.Writer, roots <font color=blue>chan</font> *Node) <font color=blue>chan</font> error
        - mkdir(ctx context.Context, roots <font color=blue>chan</font> *Node) <font color=blue>chan</font> error
        - handlePipelineErr(ctx context.Context, echs ...<font color=blue>chan</font> error) error
        - enableValidation() 

    }
    class treeSimple << (S,Aquamarine) >> {
        - grower growerSimple
        - spreader spreaderSimple
        - mkdirer mkdirerSimple

        - output(w io.Writer, r io.Reader, conf *config) error
        - outputProgrammably(w io.Writer, root *Node, conf *config) error
        - makedir(r io.Reader, conf *config) error
        - makedirProgrammably(root *Node, conf *config) error
        - grow(roots []*Node) error
        - spread(w io.Writer, roots []*Node) error
        - mkdir(roots []*Node) error
        - enableValidation() 

    }
    class yamlNode << (S,Aquamarine) >> {
        + Name string
        + Children []*yamlNode

    }
    class yamlSpreaderPipeline << (S,Aquamarine) >> {
        - spread(ctx context.Context, w io.Writer, roots <font color=blue>chan</font> *Node) <font color=blue>chan</font> error

    }
    class yamlSpreaderSimple << (S,Aquamarine) >> {
        - spread(w io.Writer, roots []*Node) error

    }
}
"gtree.defaultSpreader" *-- "gtree.colorizeSpreader"
"gtree.colorizeSpreaderSimple" *-- "gtree.colorizeSpreaderPipeline"
"gtree.defaultSpreaderSimple" *-- "gtree.colorizeSpreaderSimple"
"gtree.defaultGrowerSimple" *-- "gtree.defaultGrowerPipeline"
"gtree.defaultMkdirerSimple" *-- "gtree.defaultMkdirerPipeline"
"gtree.defaultSpreaderSimple" *-- "gtree.defaultSpreaderPipeline"
"sync.Mutex" *-- "gtree.defaultSpreaderPipeline"
"gtree.nopGrowerSimple" *-- "gtree.nopGrowerPipeline"

"gtree.spreader" <|-- "gtree.colorizeSpreader"
"gtree.spreaderSimple" <|-- "gtree.colorizeSpreader"
"gtree.spreaderPipeline" <|-- "gtree.colorizeSpreaderPipeline"
"gtree.spreader" <|-- "gtree.colorizeSpreaderSimple"
"gtree.spreaderSimple" <|-- "gtree.colorizeSpreaderSimple"
"gtree.grower" <|-- "gtree.defaultGrower"
"gtree.growerSimple" <|-- "gtree.defaultGrower"
"gtree.grower" <|-- "gtree.defaultGrowerSimple"
"gtree.growerSimple" <|-- "gtree.defaultGrowerSimple"
"gtree.mkdirerPipeline" <|-- "gtree.defaultMkdirerPipeline"
"gtree.mkdirerSimple" <|-- "gtree.defaultMkdirerSimple"
"gtree.spreader" <|-- "gtree.defaultSpreader"
"gtree.spreaderSimple" <|-- "gtree.defaultSpreader"
"gtree.spreaderPipeline" <|-- "gtree.defaultSpreaderPipeline"
"gtree.spreader" <|-- "gtree.defaultSpreaderSimple"
"gtree.spreaderSimple" <|-- "gtree.defaultSpreaderSimple"
"gtree.spreader" <|-- "gtree.jsonSpreader"
"gtree.spreaderSimple" <|-- "gtree.jsonSpreader"
"gtree.spreaderPipeline" <|-- "gtree.jsonSpreaderPipeline"
"gtree.spreader" <|-- "gtree.jsonSpreaderSimple"
"gtree.spreaderSimple" <|-- "gtree.jsonSpreaderSimple"
"gtree.grower" <|-- "gtree.nopGrower"
"gtree.growerSimple" <|-- "gtree.nopGrower"
"gtree.grower" <|-- "gtree.nopGrowerSimple"
"gtree.growerSimple" <|-- "gtree.nopGrowerSimple"
"gtree.spreaderPipeline" <|-- "gtree.tomlSpreaderPipeline"
"gtree.spreader" <|-- "gtree.tomlSpreaderSimple"
"gtree.spreaderSimple" <|-- "gtree.tomlSpreaderSimple"
"gtree.growerPipeline" <|-- "gtree.treePipeline"
"gtree.iTree" <|-- "gtree.treePipeline"
"gtree.mkdirerPipeline" <|-- "gtree.treePipeline"
"gtree.spreaderPipeline" <|-- "gtree.treePipeline"
"gtree.grower" <|-- "gtree.treeSimple"
"gtree.growerSimple" <|-- "gtree.treeSimple"
"gtree.iTree" <|-- "gtree.treeSimple"
"gtree.mkdirerSimple" <|-- "gtree.treeSimple"
"gtree.spreader" <|-- "gtree.treeSimple"
"gtree.spreaderSimple" <|-- "gtree.treeSimple"
"gtree.spreaderPipeline" <|-- "gtree.yamlSpreaderPipeline"
"gtree.spreader" <|-- "gtree.yamlSpreaderSimple"
"gtree.spreaderSimple" <|-- "gtree.yamlSpreaderSimple"

"__builtin__.int" #.. "gtree.encode"
"__builtin__.int" #.. "gtree.spaceType"
"gtree.<font color=blue>func</font>(*config) " #.. "gtree.Option"
hide fields
hide methods
@enduml
