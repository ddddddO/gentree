// Package gtree provides tree-structured output.
package gtree

import (
	"io"

	"github.com/pkg/errors"
)

var (
	// ErrNilNode is returned if the argument *gtree.Node of ExecuteProgrammably function is nill.
	ErrNilNode = errors.New("nil node")
	// ErrNotRoot is returned if the argument *gtree.Node of ExecuteProgrammably function is not root of the tree.
	ErrNotRoot = errors.New("not root node")
)

// ExecuteProgrammably outputs tree to w.
// This function requires node generated by NewRoot function.
func ExecuteProgrammably(w io.Writer, root *Node, optFns ...OptFn) error {
	if root == nil {
		return ErrNilNode
	}
	if !root.isRoot() {
		return ErrNotRoot
	}

	conf, err := newConfig(optFns...)
	if err != nil {
		return err
	}

	idxCounter.reset()

	tree := newTree(conf.encode, conf.formatLastNode, conf.formatIntermedialNode)
	tree.addRoot(root)
	return tree.grow().expand(w)
}

// GenerateProgrammably generates directories.
// This function requires node generated by NewRoot function.
func GenerateProgrammably(root *Node, optFns ...OptFn) error {
	if root == nil {
		return ErrNilNode
	}
	if !root.isRoot() {
		return ErrNotRoot
	}

	conf, err := newConfig(optFns...)
	if err != nil {
		return err
	}

	idxCounter.reset()

	tree := newTree(conf.encode, conf.formatLastNode, conf.formatIntermedialNode)
	tree.addRoot(root)
	return tree.grow().generate()
}

var (
	idxCounter = newCounter()
)

// NewRoot creates a starting node for building tree.
func NewRoot(text string) *Node {
	return newNode(text, rootHierarchyNum, idxCounter.next())
}

// Add adds a node and returns an instance of it.
// If a node with the same text already exists in the same hierarchy of the tree, that node will be returned.
func (parent *Node) Add(text string) *Node {
	for _, child := range parent.Children {
		if text == child.Text {
			return child
		}
	}

	current := newNode(text, parent.hierarchy+1, idxCounter.next())
	current.setParent(parent)
	parent.addChild(current)
	return current
}
